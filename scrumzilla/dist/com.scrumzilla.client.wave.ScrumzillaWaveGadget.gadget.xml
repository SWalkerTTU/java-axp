<?xml version="1.0" encoding="UTF-8"?>
<Module><ModulePrefs scrolling="true" title="Scrumzilla"><Require feature="dynamic-height"/><Require feature="wave"/></ModulePrefs><Content type="html"><![CDATA[

<style type="text/css">
.scrumzilla-ui-storyTable{
	border:1px solid grey;
	background-color:	LemonChiffon;
}

.scrumzilla-ui-storyColumnHeader {
	background-color:	SlateGray;
	text-align:			center;
}

.scrumzilla-ui-taskStateHeader{
	background-color:	SlateGray;
	text-align:			center;
}

.scrumzilla-storyUI-addStoryPanel {
	width:				100%;
	background-color:	Khaki;
	padding-right:		20px;
	padding-left:		20px;
	padding-top:		5px;
	padding-bottom:		5px;
}

.scrumzilla-storyUI-addStoryButton {

}

.scrumzilla-storyUI-addStoryNameText{

}

.scrumzilla-storyUI-addStoryCancelButton {

}

.scrumzilla-storyUI-addStoryOkButton {

}

.scrumzilla-storyUI-storyTitlePanel {
	height:				100%;
	background-color:	Khaki;
	padding-right:		20px;
	padding-left:		20px;
	padding-top:		5px;
	padding-bottom:		5px;
}

.scrumzilla-storyUI-storyLabel {

}

.scrumzilla-storyUI-removeStoryButton {

}

.scrumzilla-taskUI-addTaskPanel {
	height:				100%;
	width:				100%;
	background-color:	Beige;
}

.scrumzilla-taskUI-addTaskButton {

}

.scrumzilla-taskUI-addTaskLabel {

}

.scrumzilla-taskUI-addTaskCancelButton {

}

.scrumzilla-taskUI-addTaskConfirmButton {

}

.scrumzilla-taskUI-taskList {
	background-color: 	LightSteelBlue;
	padding:			3px;
}

.scrumzilla-taskUI-emptyTaskList {
	width:	120px;
	height:	80px;
}

.scrumzilla-taskUI-taskPanel{
	margin-right: 		5px;
	margin-left: 		5px;
	background-color:	Ivory;
}

.scrumzilla-taskUI-dragLabel{
	background-color:	LightSlateGray;
	padding:			2px;
	margin:				2px;
}
.scrumzilla-taskUI-removeTaskButton {

}

.scrumzilla-localTaskUI-taskLabel {
	margin:				2px;
}

.scrumzilla-localTaskUI-taskDescription {
	margin:				2px;
}
</style>

<script>function scrumzilla(){
  var $intern_0 = '', $intern_9 = '" for "gwt:onLoadErrorFn"', $intern_11 = '" for "gwt:onPropertyErrorFn"', $intern_30 = '">', $intern_43 = '"><\/script>', $intern_17 = '&', $intern_45 = '.cache.js', $intern_44 = '.cache.js$', $intern_6 = '/', $intern_3 = '1.5', $intern_35 = '1AA0870126D128CD590F6344531479DC.cache.js', $intern_38 = '3B7FADEA831EEB37F9F4F9D3103FC409.cache.js', $intern_37 = '444E7AEB969E1BB643DD67EF005955F9.cache.js', $intern_36 = '811EE89C2FD0EA89369102D3331F782D.cache.js', $intern_29 = '<link rel="stylesheet" href="', $intern_42 = '<script language="javascript" src="', $intern_46 = '<script src="', $intern_13 = '=', $intern_39 = 'AB455B673335FD9C84976AE8ED31D761.cache.js', $intern_8 = 'Bad handler "', $intern_40 = 'E529FB4C47920912C7903947120F15FC.cache.js', $intern_16 = '_', $intern_15 = 'country', $intern_4 = 'external.gwtOnLoad failed: ', $intern_25 = 'gecko', $intern_26 = 'gecko1_8', $intern_31 = 'gwt-dnd.css', $intern_1 = 'gwt.hybrid', $intern_28 = 'gwt/standard/standard.css', $intern_7 = 'gwt:onLoadErrorFn', $intern_10 = 'gwt:onPropertyErrorFn', $intern_12 = 'gwt:property', $intern_41 = 'http://wave-api.appspot.com/public/wave.js', $intern_24 = 'ie6', $intern_23 = 'ie8', $intern_14 = 'lang', $intern_33 = 'moduleStartup', $intern_22 = 'msie', $intern_34 = 'onModuleLoadStart', $intern_19 = 'opera', $intern_21 = 'safari', $intern_2 = 'scrumzilla', $intern_32 = 'startup', $intern_27 = 'unknown', $intern_5 = 'url', $intern_18 = 'user.agent', $intern_20 = 'webkit';
  var $wnd = window, $doc = document, external = $wnd.external, gwtOnLoad, bodyDone, base = $intern_0, metaProps = {}, values = [], providers = [], answers = [], onLoadErrorFunc, propertyErrorFunc, $stats = $wnd.__gwtStatsEvent?function(a){
    return $wnd.__gwtStatsEvent(a);
  }
  :null;
  if (!$wnd.__gwt_stylesLoaded) {
    $wnd.__gwt_stylesLoaded = {};
  }
  if (!$wnd.__gwt_scriptsLoaded) {
    $wnd.__gwt_scriptsLoaded = {};
  }
  function isHostedMode(){
    try {
      return external && (external.gwtOnLoad && $wnd.location.search.indexOf($intern_1) == -1);
    }
     catch (e) {
      return false;
    }
  }

  function maybeStartModule(){
    if (bodyDone) {
      if (isHostedMode()) {
        try {
          external.gwtOnLoad($wnd, $intern_2, $intern_3);
        }
         catch (e) {
          $wnd.alert($intern_4 + e);
        }
      }
       else if (gwtOnLoad) {
        gwtOnLoad(onLoadErrorFunc, $intern_2, base, $intern_3);
      }
    }
  }

  function computeScriptBase(){
    base = _args()[$intern_5];
    base = base.substring(0, base.lastIndexOf($intern_6) + 1);
  }

  function processMetas(){
    var meta;
    var prefs = new _IG_Prefs();
    if (meta = prefs.getString($intern_7)) {
      try {
        onLoadErrorFunc = eval(meta);
      }
       catch (e) {
        alert($intern_8 + content + $intern_9);
      }
    }
    if (meta = prefs.getString($intern_10)) {
      try {
        propertyErrorFunc = eval(meta);
      }
       catch (e) {
        alert($intern_8 + content + $intern_11);
      }
    }
    if (meta = prefs.getArray($intern_12)) {
      for (var i = 0; i < meta.length; i++) {
        var content = meta[i];
        if (content) {
          var value, eq = content.indexOf($intern_13);
          if (eq >= 0) {
            name = content.substring(0, eq);
            value = content.substring(eq + 1);
          }
           else {
            name = content;
            value = $intern_0;
          }
          metaProps[name] = value;
        }
      }
    }
  }

  function setLocale(){
    var args = $wnd.location.search;
    var lang = extractFromQueryStr(args, $intern_14);
    if (lang != null) {
      country = extractFromQueryStr(args, $intern_15);
      if (country != null) {
        $wnd.__gwt_Locale = lang + $intern_16 + country;
      }
       else {
        $wnd.__gwt_Locale = lang;
      }
    }
  }

  function extractFromQueryStr(args, argName){
    var start = args.indexOf(argName + $intern_13);
    if (start < 0) {
      return undefined;
    }
    var value = args.substring(start);
    var valueBegin = value.indexOf($intern_13) + 1;
    var valueEnd = value.indexOf($intern_17);
    if (valueEnd == -1) {
      valueEnd = value.length;
    }
    return value.substring(valueBegin, valueEnd);
  }

  function unflattenKeylistIntoAnswers(propValArray, value){
    var answer = answers;
    for (var i = 0, n = propValArray.length - 1; i < n; ++i) {
      answer = answer[propValArray[i]] || (answer[propValArray[i]] = []);
    }
    answer[propValArray[n]] = value;
  }

  function computePropValue(propName){
    var value = providers[propName](), allowedValuesMap = values[propName];
    if (value in allowedValuesMap) {
      return value;
    }
    var allowedValuesList = [];
    for (var k in allowedValuesMap) {
      allowedValuesList[allowedValuesMap[k]] = k;
    }
    if (propertyErrorFunc) {
      propertyErrorFunc(propName, allowedValuesList, value);
    }
    throw null;
  }

  providers[$intern_18] = function(){
    var ua = navigator.userAgent.toLowerCase();
    var makeVersion = function(result){
      return parseInt(result[1]) * 1000 + parseInt(result[2]);
    }
    ;
    if (ua.indexOf($intern_19) != -1) {
      return $intern_19;
    }
     else if (ua.indexOf($intern_20) != -1) {
      return $intern_21;
    }
     else if (ua.indexOf($intern_22) != -1) {
      if (document.documentMode >= 8) {
        return $intern_23;
      }
       else {
        var result = /msie ([0-9]+)\.([0-9]+)/.exec(ua);
        if (result && result.length == 3) {
          var v = makeVersion(result);
          if (v >= 6000) {
            return $intern_24;
          }
        }
      }
    }
     else if (ua.indexOf($intern_25) != -1) {
      var result = /rv:([0-9]+)\.([0-9]+)/.exec(ua);
      if (result && result.length == 3) {
        if (makeVersion(result) >= 1008)
          return $intern_26;
      }
      return $intern_25;
    }
    return $intern_27;
  }
  ;
  values[$intern_18] = {gecko:0, gecko1_8:1, ie6:2, ie8:3, opera:4, safari:5};
  scrumzilla.onScriptLoad = function(gwtOnLoadFunc){
    scrumzilla = null;
    gwtOnLoad = gwtOnLoadFunc;
    maybeStartModule();
  }
  ;
  computeScriptBase();
  processMetas();
  setLocale();
  _IG_RegisterOnloadHandler(function(){
    if (!bodyDone) {
      bodyDone = true;
      if (!__gwt_stylesLoaded[$intern_28]) {
        __gwt_stylesLoaded[$intern_28] = true;
        document.write($intern_29 + _IG_GetCachedUrl(base + $intern_28) + $intern_30);
      }
      if (!__gwt_stylesLoaded[$intern_31]) {
        __gwt_stylesLoaded[$intern_31] = true;
        document.write($intern_29 + _IG_GetCachedUrl(base + $intern_31) + $intern_30);
      }
      maybeStartModule();
    }
  }
  );
  if (isHostedMode()) {
    $wnd.$wnd = $wnd;
    $wnd.$doc = $doc;
    $wnd.$moduleName = $intern_2;
    $wnd.$moduleBase = base;
    $wnd.__gwt_getProperty = computePropValue;
    $wnd.__gwt_initHandlers = scrumzilla.__gwt_initHandlers;
    $wnd.__gwt_module_id = 0;
    $wnd.fireOnModuleLoadStart = function(className){
      $stats && $stats({moduleName:$moduleName, subSystem:$intern_32, evtGroup:$intern_33, millis:(new Date()).getTime(), type:$intern_34, className:className});
    }
    ;
    $wnd.onunload = function(){
      external.gwtOnLoad($wnd, null, $intern_3);
    }
    ;
  }
   else {
    var strongName;
    try {
      unflattenKeylistIntoAnswers([$intern_23], $intern_35);
      unflattenKeylistIntoAnswers([$intern_24], $intern_36);
      unflattenKeylistIntoAnswers([$intern_21], $intern_37);
      unflattenKeylistIntoAnswers([$intern_19], $intern_38);
      unflattenKeylistIntoAnswers([$intern_26], $intern_39);
      unflattenKeylistIntoAnswers([$intern_25], $intern_40);
      strongName = answers[computePropValue($intern_18)];
    }
     catch (e) {
      return;
    }
    if (!__gwt_scriptsLoaded[$intern_41]) {
      __gwt_scriptsLoaded[$intern_41] = true;
      document.write($intern_42 + _IG_GetCachedUrl($intern_41) + $intern_43);
    }
    var fullName = base + strongName;
    if (fullName.search($intern_44) < 0) {
      fullName = fullName.concat($intern_45);
    }
    var loadFrom = _IG_GetCachedUrl(fullName, {refreshInterval:31536000});
    $doc.write($intern_46 + loadFrom + $intern_43);
  }
}

scrumzilla.__gwt_initHandlers = function(resize, beforeunload, unload){
  var $wnd = window, oldOnResize = $wnd.onresize, oldOnBeforeUnload = $wnd.onbeforeunload, oldOnUnload = $wnd.onunload;
  $wnd.onresize = function(evt){
    try {
      resize();
    }
     finally {
      oldOnResize && oldOnResize(evt);
    }
  }
  ;
  $wnd.onbeforeunload = function(evt){
    var ret, oldRet;
    try {
      ret = beforeunload();
    }
     finally {
      oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);
    }
    if (ret != null) {
      return ret;
    }
    if (oldRet != null) {
      return oldRet;
    }
  }
  ;
  $wnd.onunload = function(evt){
    try {
      unload();
    }
     finally {
      oldOnUnload && oldOnUnload(evt);
    }
  }
  ;
}
;
scrumzilla();
</script>
<div id="__gwt_gadget_content_div"></div>]]></Content></Module>
